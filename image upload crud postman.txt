=============== image upload crud postman -> Body -> form-data {1.)profile : image upload 2.)name 3.)email 4.)phonenumber 5.)password}=================

const mongoose = require("mongoose");

const userSchema = mongoose.Schema(
  {
    name: {
      type: String,
      required: true,
    },
    email: {
      type: String,
      required: true,
    },
    phonenumber: {
      type: Number,
      required: true,
    },
    password: {
      type: String,
      required: true,
    },
    imurl:{
      type: String,
    }
  },
  {
    timestamps: true,
  }
);

module.exports = mongoose.model("User", userSchema);
============================================================
const express = require("express");
const router = express.Router();
const User = require("../models/user");
const jwt = require("jsonwebtoken");
const secretKey = process.env.JWT_SECRET_KEY || "yourSecretKey";
const multer = require("multer");
const path = require("path");

const storage = multer.diskStorage({
  destination: "./uploads/images",
  filename: (req, file, cb) => {
    return cb(
      null,
      `${file.fieldname}-${Date.now()}${path.extname(file.originalname)}`
    );
  },
});

const upload = multer({
  storage: storage,
});

// router.post("/upload", upload.single("profile"), async (req, res) => {
//   // console.log(req.file);
//   res.json({
//     success: 1,
//     imurl: `http://localhost:5000/profile/${req.file.filename}`,
//   });
// });

function authenticateToken(req, res, next) {
  const authHeader = req.headers["authorization"];
  const token = authHeader && authHeader.split(" ")[1];

  if (token == null) {
    return res.sendStatus(401);
  }

  jwt.verify(token, secretKey, (err, user) => {
    if (err) {
      return res.sendStatus(403);
    }
    req.user = user;
    next();
  });
}

// User registration route
router.post("/register",upload.single("profile"), async (req, res) => {
  const { name, email, phonenumber, password,imurl } = req.body;
  // res.json({
  //   success: 1,
  //   imurl: `http://localhost:5000/profile/${req.file.filename}`,
  // });

  try {
    const newUser = new User({
      name,
      email,
      phonenumber,
      password,
      imurl: `http://localhost:5000/profile/${req.file.filename}`,
    });

    const user = await newUser.save();
   

    const token = jwt.sign({ email: user.email }, secretKey);
    res.json({ token });
  } catch (error) {
    res.status(400).json({ message: error.message });
  }
});

// Delete a user
router.delete("/users/:id", authenticateToken, async (req, res) => {
  const userId = req.params.id;

  try {
    await User.findByIdAndDelete(userId);

    res.send("User Deleted Successfully");
  } catch (error) {
    res.status(400).json({ message: error.message });
  }
});

// Update a user
router.put("/users/:id", authenticateToken,upload.single("profile"), async (req, res) => {
  const { name, email, phonenumber, password ,imurl } = req.body;
  const userId = req.params.id;

  try {
    const updatedUser = await User.findByIdAndUpdate(
      userId,
      {
        name,
        email,
        phonenumber,
        password,
        imurl,
      },
      { new: true }
    );

    res.send("User Updated Successfully");
  } catch (error) {
    res.status(400).json({ message: error.message });
  }
});

// Get all users
router.get("/users", authenticateToken, async (req, res) => {
  try {
    const users = await User.find();
    res.json(users);
  } catch (error) {
    res.status(500).json({ message: error.message });
  }
});

module.exports = router;
========================================
const mongoose = require("mongoose");
const mongoURL = "mongodb+srv://manoj:ovinmano7339@cluster0.uizjnyd.mongodb.net/usersform";

mongoose.connect(mongoURL , { useNewUrlParser:true , useUnifiedTopology:true });

const connection = mongoose.connection

connection.on("error", ()=>{
    console.log("Mongo DB connection failed");
})
connection.on("connected" , ()=>{
    console.log("mongo DB connection Successfull !");
})

module.exports = mongoose;
=======================================
const express = require("express");
const userRouter = require("./routes/userRoute");
const app = express();
const cors = require('cors');



const dbConfig = require("./db");

app.use(cors());
app.use(express.json());
// app.use("/profile", express.static("uploads/images"));
app.use("/", userRouter);

const port = process.env.PORT || 5000;

app.listen(port, () => console.log("Node server started using nodemon"));
